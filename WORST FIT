#include <stdio.h>
#include <stdlib.h>
#define MAX_BLOCKS 10
#define MAX_PROCESSES 5
int n, m;
int blocks[MAX_BLOCKS];

void worst_fit(int process_size[])
{
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < m; i++)
        allocation[i] = -1;
    for (int i = 0; i < n; i++)
    {
        int wst_idx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blocks[j] >= process_size[i])
            {
                if (wst_idx == -1)
                    wst_idx = j;
                else if (blocks[wst_idx] < blocks[j])
                    wst_idx = j;
            }
        }
        if (wst_idx != -1)
        {
            allocation[wst_idx] = i;
            blocks[wst_idx] -= process_size[i];
        }
    }
    printf("Process No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t\t%d\t\t", i + 1, process_size[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}
int main()
{
    int process_size[MAX_PROCESSES];
    printf("Enter the number of blocks: ");
    scanf("%d", &m);
    printf("Enter the size of each block: ");
    for (int i = 0; i < m; i++)
        scanf("%d", &blocks[i]);
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the size of each process: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &process_size[i]);
    worst_fit(process_size);
    return 0;
}

OUTPUT:
Enter the number of blocks: 4
Enter the size of each block: 40 10 30 60
Enter the number of processes: 5
Enter the size of each process: 100 50 30 120 35
Process No.     Process Size    Block no.
1               100             3
2               50              Not Allocated
3               30              Not Allocated
4               120             2
5               35              -405931519

--------------------------------
Process exited after 35.78 seconds with return value 0
Press any key to continue . . .
